defaults:
  seed: 0

# specifics about experiment that will be logged to telegram
description: "2D segmentation of people"


########################################################
################### Dataset settings ###################
########################################################

datasets:
  # Steps per epoch for each dataset. Total steps = steps_per_epoch * len(datasets.list)
  steps_per_epoch: 10

  list:
    - id: 0
      name: human                        # Used to get NameDataset from data/name_dataset.py
      root: '/Users/vladbahteev/Human-Segmentation-Dataset'
      use_to_train: True
      use_to_validate: True

      pre_transforms: []

      augmentations:
        - name: OneOf
          list:
            - name: GaussNoise
            - name: Blur
        - name: HorizontalFlip
        - name: ShiftScaleRotate
          shift_limit: 0.05
          p: 1

      post_transforms: [ { 'name': 'Resize', 'height': 64, 'width': 64 }, { 'name': 'ToTensor' } ]

    - id: 1
      name: faces
      root: '/Users/vladbahteev/FASSEG-repository'
      use_to_train: True
      use_to_validate: False

      pre_transforms: [ ]
      augmentations:
        - name: HorizontalFlip
        - name: ShiftScaleRotate
          shift_limit: 0.05
          p: 1
      post_transforms: [ { 'name': 'Resize', 'height': 64, 'width': 64 }, { 'name': 'ToTensor' } ]


dataloader:
  num_workers: 0
  batch_size: 10
  pin_memory: True

########################################################
#################### Model settings ####################
########################################################

model:
  name: 'Unet'
  n_dim: 2
  pipeline: 'multi_task_segmentation'
  params: {'encoder_name': 'resnet18', 'in_channels': 3}

  # Also works for regression
  classification:
    default_criterion:
      cls: 'torch.nn.BCEWithLogitsLoss'

    heads:
      - datasets_ids: [0]     # first head will be used for these datasets
        target: 'area'

        # Optional parameter, takes default_criterion if not specified
        criterion:
          cls: 'torch.nn.MSELoss'

        metrics: []

        head: 'multi_layer'   # [linear | multi_layer]
        params:
          classes: 1

          layer_sizes: [128]
          activation: 'torch.nn.ReLU'
          activation_params: {'inplace': True}


  segmentation:
    default_criterion:
      cls: 'pytorch_toolbelt.losses.SoftCrossEntropyLoss'
      smooth_factor: 0.1

    heads:
      - datasets_ids: [0]
        target: 'mask_human'

        # In lightning module metrics will have name {target}@{metric_name}
        metrics: [
          { 'name': 'intersection_over_union', 'num_classes': 2, 'threshold': 0.5 },
        ]

        head: 'conv_upsample'
        params:
          classes: 2

          kernel_size: 3

      - datasets_ids: [1]
        target: 'mask_face'

#        metrics: [
#          { 'name': 'intersection_over_union', 'num_classes': 4},
#        ]

        head: 'conv_upsample'
        params:
          classes: 4

          kernel_size: 3


optimizer: [{
  'cls': 'torch.optim.Adam',
  'lr': 0.001
}]

# For some schedulers, you need to rewrite the place where it is called
scheduler: [{
  'cls': 'torch.optim.lr_scheduler.CosineAnnealingWarmRestarts',
  'T_0': 2, 'T_mult': 2
}]

########################################################
################## Training settings ###################
########################################################

callbacks: [
  {'name': 'ModelCheckpoint', 'monitor': 'mask_human@intersection_over_union', 'mode': 'max', 'save_last': False, 'save_top_k': 1},
  {'name': 'EarlyStopping', 'monitor': 'valid_loss', 'mode': 'min', 'patience': 15},
  ]

logging:
  name: null   # [null | csv_logs | mlflow | neptune | comet | tensorboard | test_tube | swandb]
  params: {}

# You can add any argument for pytorch_lightning.Trainer
lightning:
  gpus: 0
  num_nodes: 1

# Parameters defined in stages are used to update fields defined above
train_stages:
  - name: res-64
    lightning:
      max_epochs: 2

  - name: res-128
    lightning:
      max_epochs: 2

    optimizer: [{'cls': 'torch.optim.SGD', 'lr': 0.0001}]

    model:
      segmentation:
        heads:
          - target: 'mask_human'
            criterion:
              cls: 'pytorch_toolbelt.losses.FocalLoss'

    datasets:
      list:
        - id: 0
          post_transforms: [ { 'name': 'Resize', 'height': 128, 'width': 128 }, { 'name': 'ToTensor' } ]