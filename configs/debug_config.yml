defaults:
  seed: 0

# specifics about experiment that will be logged to telegram
description: "2D segmentation of people"


########################################################
################### Dataset settings ###################
########################################################

datasets:
  # Steps per epoch for each dataset. Total steps = steps_per_epoch * len(datasets.list)
  steps_per_epoch: 10

  list:
    - name: human                        # Used to get NameDataset from data/name_dataset.py
      root: '/Users/vladbahteev/Human-Segmentation-Dataset'
      use_to_train: True
      use_to_validate: True

      pre_transforms: []

      augmentations:
        - name: OneOf
          list:
            - name: GaussNoise
            - name: Blur
        - name: HorizontalFlip
        - name: ShiftScaleRotate
          shift_limit: 0.05
          p: 1

      post_transforms: [ { 'name': 'Resize', 'height': 128, 'width': 128 }, { 'name': 'ToTensor' } ]

    - name: human                        # Used to get NameDataset from data/name_dataset.py
      root: '/Users/vladbahteev/Human-Segmentation-Dataset'
      use_to_train: True
      use_to_validate: False

      pre_transforms: [ ]

      augmentations:
        - name: OneOf
          list:
            - name: GaussNoise
            - name: Blur
        - name: HorizontalFlip
        - name: ShiftScaleRotate
          shift_limit: 0.05
          p: 1

      post_transforms: [ { 'name': 'Resize', 'height': 256, 'width': 256 }, { 'name': 'ToTensor' } ]


dataloader:
  num_workers: 0
  batch_size: 10
  pin_memory: True

########################################################
#################### Model settings ####################
########################################################

model:
  name: 'Unet'
  n_dim: 2
  pipeline: 'segmentation'      # [segmentation]
  params: {'encoder_name': 'resnet18', 'in_channels': 3, 'classes': 1}

criterion: [{
  'cls': 'pytorch_toolbelt.losses.JointLoss',
  'first_weight': 1.0,
  'second_weight': 2.0,
  'first': {'cls': 'pytorch_toolbelt.losses.DiceLoss', 'mode': 'binary'},
  'second': {'cls': 'pytorch_toolbelt.losses.FocalLoss', 'gamma': 3}
}]


optimizer: [{
  'cls': 'torch.optim.Adam',
  'lr': 0.001
}]

# For some schedulers, you need to rewrite the place where it is called
scheduler: [{
  'cls': 'torch.optim.lr_scheduler.CosineAnnealingWarmRestarts',
  'T_0': 2, 'T_mult': 2
}]

########################################################
################## Training settings ###################
########################################################

callbacks: [
  {'name': 'ModelCheckpoint', 'monitor': 'intersection_over_union', 'mode': 'max', 'save_last': False, 'save_top_k': 1},
  {'name': 'EarlyStopping', 'monitor': 'valid_loss', 'mode': 'min', 'patience': 15},
  ]

logging:
  name: null   # [null | csv_logs | mlflow | neptune | comet | tensorboard | test_tube | swandb]
  params: {}
  metrics: [
    {'name': 'intersection_over_union', 'threshold': 0.5}
  ]

# You can add any argument for pytorch_lightning.Trainer
lightning:
  gpus: 0
  num_nodes: 1

# Parameters defined in stages are used to update fields defined above
train_stages:
  - name: res-128
    lightning:
      max_epochs: 2

  - name: res-256
    lightning:
      max_epochs: 2

    optimizer: [{'cls': 'torch.optim.SGD', 'lr': 0.00001}]

    datasets:
      list:
        - name: human
          post_transforms: [
            {'name': 'Resize', 'height': 256, 'width': 256},
            {'name': 'ToTensor'},
          ]